{
  "title": "Variables and Memory",
  "description": "Every variable occupies bytes, learn how.",
  "content": [
    {
      "type": "text",
      "text": "You’ve seen a C program run and print text. Now, deeper question: where does that text, or any piece of data, actually live when the program runs?"
    },
    {
      "type": "text",
      "text": "The answer lies in memory. Every program uses memory to store and retrieve information while it runs."
    },
    {
      "type": "text",
      "text": "Think of memory as a long row of numbered boxes, stored in your RAM. Each box can hold a value, and each has an address, which is its position in that long line. When you create a variable in C, you reserve one of those boxes and give it a name so you can find it later."
    },
    {
      "type": "text",
      "text": "For example, when you write `int age = 20;`, you’re creating a box big enough to hold a whole number (known as an integer), and storing the number 20 inside it. The name `age` is just a label, something we use to remember which box we’re talking about. The program itself doesn't store the name but only remembers the address."
    },
    {
      "type": "text",
      "text": "In fact, instead of storing actual values into your memory, you can store the addresses other parts of your memory. Sounds confusing right? That will be unpacked later so don't worry about it. Plus, the program and the code itself is stored in memory, so aside from data and addresses to that data, it can also store instructions."
    },
    {
      "type": "text",
      "text": "To clarify, RAM is the short-term memory of your device whilst your HDD (for those with super old hardware) or SSD is your long-term memory. Short term memory is far faster to access that long term memory which is why we don't just directly store temporary data into long term memory."
    },
    {
      "type": "multiple-choice-quiz",
      "question": "Where is a program stored when it runs?",
      "options": [
        { "id": "b", "text": "In your HDD." },
        { "id": "a", "text": "In your RAM.", "correct": true },
        { "id": "c", "text": "In your CPU." },
        { "id": "d", "text": "In your SSD." }
      ],
      "explanation": "When you open a program or app on any device, it gets loaded into short term memory, RAM, before running."
    },
    {
      "type": "text",
      "text": "Now it's time for you to store your own data in memory!"
    },
    {
      "type": "text",
      "text": "In C, declaring a variable usually is built up of five bits of text separated by spaces, which will be referred to as tokens from now on."
    },
    {
      "type": "text",
      "text": "Because C is \"strongly typed\", every variable you declare starts off with the type of data you want to store, such as `int`, then the name you want to give the variable yourself (to reference it in other parts of your code), then an equal, `=`, sign, before you set its initial value. Don't forget to end the line with a semi-colon (`;`). Here's an example of a variable declaration: `int bogus = 15;`"
    },
    {
      "type": "text",
      "text": "Now, `int` is short for integer (a whole number), so `int bogus = 15;` stores a whole number, no decimals. A decimal number can be stored via a `float`, like so: `float harrow = 4.2;`."
    },
    {
      "type": "text",
      "text": "As for text, a single character can be stored with `char Variable = 'A';` and to store many characters, known as strings, you need to use a list of characters (which will be explained in future lessons)."
    },
    {
      "type": "code-quiz",
      "language": "c",
      "prompt": "Change this code to print out the number 69 instead of 67.",
      "prefixCode": "#include <stdio.h>\n\nint main() {\n",
      "starterCode": "int number = 67;\n",
      "suffixCode": "    printf(\"%d\", number);\n    return 0;\n}",
      "desiredOutput": { "type": "exact", "value": "69" }
    },
    {
      "type": "text",
      "text": "If you recall, using `printf(\"Text\")` allows you to output text to the console... but what if you wanted to use numbers?"
    },
    {
      "type": "code-quiz",
      "language": "c",
      "prompt": "Declare an integer variable named 'count' and give it a value of 5, then print it to the screen.",
      "starterCode": "#include <stdio.h>\n\nint main() {\n    // your code here\n    return 0;\n}",
      "desiredOutput": { "type": "exact", "value": "5" }
    },
    {
      "type": "text",
      "text": "When you ran that program, the CPU stored the number 5 somewhere in memory. The variable count was your way of saying, 'remember this value for later.' If you print it again or perform math on it, the computer goes back to that same spot in memory, retrieves the value, and uses it in the calculation."
    },
    {
      "type": "multiple-choice-quiz",
      "question": "What does a variable actually represent in C?",
      "options": [
        { "id": "a", "text": "A label that points to a spot in memory.", "correct": true },
        { "id": "b", "text": "A box that moves around randomly." },
        { "id": "c", "text": "A piece of code that runs automatically." },
        { "id": "d", "text": "A type of compiler instruction." }
      ],
      "explanation": "A variable is a named reference to a specific location in memory that stores a value."
    },
    {
      "type": "text",
      "text": "The type you declare, like int or char, tells the compiler how many bytes to reserve for that variable. Different data types take up different amounts of memory. An int might take 4 bytes, while a char only takes 1. You’ll see later that this matters when you start working directly with memory addresses."
    },
    {
      "type": "multiple-choice-quiz",
      "question": "If you declare 'int x = 3;', what does the word 'int' tell the computer?",
      "options": [
        { "id": "a", "text": "That x should hold a whole number.", "correct": true },
        { "id": "b", "text": "That x will store text." },
        { "id": "c", "text": "That x is a new function." },
        { "id": "d", "text": "That x controls the compiler." }
      ],
      "explanation": "The keyword int tells the compiler that x should store an integer value, and it decides how much memory to reserve based on that type."
    },
    {
      "type": "text",
      "text": "In short, variables are how you talk to memory without dealing with raw numbers and addresses. You tell the computer what to store and what to call it, and it does the rest. But in C, you’ll soon see that those underlying addresses are still visible, and you can even reach in and manipulate them yourself."
    },
    {
      "type": "text",
      "text": "Next, we’ll go deeper into those details. You’ll learn about data types and sizes, and see exactly how many bytes different kinds of data take up. That’s where you’ll start to truly think like the machine."
    }
  ]
}
