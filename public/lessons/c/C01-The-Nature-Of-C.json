{
  "title": "The Nature of C",
  "description": "Why C is close to the metal.",
  "content": [
    {
      "type": "text",
      "text": "Before we begin, take a moment to picture what a computer really is. Inside, it’s following precise instructions written by programmers, possibly with the assistance of AI. Everything that happens on your screen comes from code that tells the machine what to do, step by step. That’s what programming is, telling a machine what to do."
    },
    {
      "type": "text",
      "text": "The C programming language gives you one of the most direct ways to do that. It was created in the 1970s, back when computers were far less powerful, and every little tiny bit of memory mattered. Because of this, C doesn't come with many features, instead providing a small set of tools you can use to manipulate hardware in whatever way you see fit. This is why the language is more often used in performance-critical code. Other languages like python and C# make things very convenient at the expense of performance."
    },
    {
      "type": "text",
      "text": "Think about it, how do computers do what we tell it to do? You can't just shout English at a piece of silicon and hope it works. That's where C comes in. It is a programming language which, despite being kinda just English with curley brackets, is text that can be easily turned into the 1s and 0s which the silicon is designed to run, through a compiler (more on that later)."
    },
    {
      "type": "multiple-choice-quiz",
      "question": "Why do we need a programming language like C?",
      "options": [
        { "id": "a", "text": "Computers understand English." },
        { "id": "b", "text": "C allows us to create instructions for hardware.", "correct": true },
        { "id": "c", "text": "C is used to make computers think on their own via quantum entanglement." },
        { "id": "d", "text": "C is only for building video games." }
      ],
      "explanation": "Computers can’t understand human language. A programming language like C lets us describe what we want the machine to do in a way that can be translated into its own language of binary instructions."
    },
    {
      "type": "text",
      "text": "Every C program you’ll write goes through a process before it runs. First, you write the instructions in plain text. Then, a special program called a compiler translates them into something the CPU can execute. The end result is a file full of machine instructions, which the computer can run directly."
    },
    {
      "type": "multiple-choice-quiz",
      "question": "Which of these describes what a compiler does?",
      "options": [
        { "id": "a", "text": "It turns your text instructions into machine instructions.", "correct": true },
        { "id": "b", "text": "It runs your code line by line instantly." },
        { "id": "c", "text": "It manages the computer’s memory for you." },
        { "id": "d", "text": "It sends your code over the internet." }
      ],
      "explanation": "A compiler reads the code you write and produces a version that the CPU can run. It acts as a translator between you and the machine."
    },
    {
      "type": "text",
      "text": "Because C is so close to the CPU, it gives you a level of control that most languages hide. You can decide where data goes, and how memory is manipulated. That’s why C is often used for operating systems, embedded systems, and performance-critical software."
    },
    {
      "type": "text",
      "text": "It isn't necessarily the memory control that C has which makes it such a fast language (although that contributes), but the fact that it is so simple that a compiler can make much better guesses as to how to optimise your code, and reduce the amount of work done by the hardware. The essence of optimisation is minimising the amount of work done."
    },
    {
      "type": "multiple-choice-quiz",
      "question": "What is optimisation?",
      "options": [
        { "id": "a", "text": "Speeding up your code through rearranging code." },
        { "id": "b", "text": "Reducing the amount of work done.", "correct": true },
        { "id": "c", "text": "Manually controlling memory." },
        { "id": "d", "text": "Activating the CPU nitro at selective times for performance gains." }
      ],
      "explanation": "Allow manually controlling memory and rearranging code can speed up code, it is only because it allows the compiler to turn you code into better cpu instructions. Optimisation at its core is reducing the work being done, whether it is rendering less unnecessary pixels, doing less math, or accessing memory less often."
    },
    {
      "type": "text",
      "text": "Despite all those great things, with great memory power, comes great memory responsibility. If you make a mistake in C, the computer will still do exactly what you told it to do, even if that means overwriting part of its own memory. There are no safety nets here, and that’s part of what makes learning C so valuable but also frustrating at times. You’ll learn how to program, how computers actually work, as well as the pain of memory leaks."
    },
    {
      "type": "text",
      "text": "For programming in general, it is important to understand that every line of code you write will be taken very literally by the compiler, it's not going to magically know that the division sign was meant to be a multiplication sign, or that the memory you were accessing is actually located on the opposite end of the RAM stick, it's just gonna run, whether or not to your benefit."
    },
    {
      "type": "text",
      "text": "In this first lesson, the goal wasn’t to write code. It was to understand the mindset of programming, particularly in C. In the next lesson, you’ll see what a C program looks like, how it starts, and how the compiler brings it to life."
    }
  ]
}
