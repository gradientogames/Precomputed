{
  "title": "Lambda and Functional Tools",
  "description": "Use map, filter, and reduce effectively.",
  "content": [
    {
      "type": "text",
      "text": "Lambda functions are anonymous, one-line functions defined with the lambda keyword. They are useful when you need a simple function without formally defining it with def."
    },
    {
      "type": "text",
      "text": "A lambda function can take any number of arguments but has a single expression. The result of that expression is automatically returned."
    },
    {
      "type": "code-quiz",
      "language": "python",
      "prompt": "Create a lambda function that adds 2 to its input and apply it to 5.",
      "starterCode": "add_two = lambda x: \nprint(add_two(5))",
      "desiredOutput": { "type": "exact", "value": "7" }
    },
    {
      "type": "text",
      "text": "The map() function applies a function to every item in a sequence and returns an iterator with the results. Combined with lambda, map allows concise transformations of data."
    },
    {
      "type": "code-quiz",
      "language": "python",
      "prompt": "Use map with a lambda to double each number in [1, 2, 3, 4] and print the resulting list.",
      "starterCode": "nums = [1, 2, 3, 4]\ndoubled = list(map(lambda x: , nums))\nprint(doubled)",
      "desiredOutput": { "type": "exact", "value": "[2, 4, 6, 8]" }
    },
    {
      "type": "text",
      "text": "The filter() function selects items from a sequence where a function returns True. Using lambda with filter allows concise selection of elements based on conditions."
    },
    {
      "type": "code-quiz",
      "language": "python",
      "prompt": "Use filter with a lambda to keep only odd numbers from [1, 2, 3, 4] and print the resulting list.",
      "starterCode": "nums = [1, 2, 3, 4]\nodds = list(filter(lambda x: , nums))\nprint(odds)",
      "desiredOutput": { "type": "exact", "value": "[1, 3]" }
    },
    {
      "type": "text",
      "text": "The reduce() function, from functools, applies a function cumulatively to the items of a sequence, reducing it to a single value. For example, you can sum a list by combining elements step by step."
    },
    {
      "type": "code-quiz",
      "language": "python",
      "prompt": "Use reduce to calculate the product of [1, 2, 3, 4] and print the result.",
      "starterCode": "from functools import reduce\nnums = [1, 2, 3, 4]\nproduct = reduce(lambda x, y: , nums)\nprint(product)",
      "desiredOutput": { "type": "exact", "value": "24" }
    },
    {
      "type": "text",
      "text": "Reflection: You learned to use lambda functions for concise operations and functional tools like map, filter, and reduce for clean data transformations. These tools allow expressive, readable, and efficient Python code."
    }
  ]
}
