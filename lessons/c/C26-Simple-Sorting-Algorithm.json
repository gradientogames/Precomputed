{
  "title": "Simple Sorting Algorithms",
  "description": "Learn basic sorting algorithms in C: bubble sort, selection sort, and insertion sort. Understand how they work, their time complexity, and how to implement them manually.",
  "content": [
    {
      "type": "text",
      "text": "Sorting algorithms arrange elements in a specific order, usually ascending or descending. Simple algorithms like bubble sort, selection sort, and insertion sort are easy to implement and help understand fundamental algorithmic thinking."
    },
    {
      "type": "text",
      "text": "Bubble sort repeatedly compares adjacent elements and swaps them if they are in the wrong order. This process continues until the array is fully sorted. It has O(n^2) time complexity, making it inefficient for large datasets, but it is simple and intuitive."
    },
    {
      "type": "code-quiz",
      "language": "c",
      "prompt": "Implement bubble sort for the array {5, 2, 4, 1, 3} and print the sorted array.",
      "prefixCode": "#include <stdio.h>\nint main() {\n    int arr[] = {5,2,4,1,3};\n    int n = 5;\n",
      "starterCode": "    // Your code here\n",
      "suffixCode": "    return 0;\n}",
      "desiredOutput": { "type": "exact", "value": "1 2 3 4 5" },
      "maxLines": 8
    },
    {
      "type": "text",
      "text": "Selection sort works by finding the smallest element in the unsorted part of the array and swapping it with the first unsorted element. This process is repeated until the array is sorted. Like bubble sort, it has O(n^2) time complexity but requires fewer swaps."
    },
    {
      "type": "code-quiz",
      "language": "c",
      "prompt": "Implement selection sort for the array {7, 3, 5, 2, 4} and print the sorted array.",
      "prefixCode": "#include <stdio.h>\nint main() {\n    int arr[] = {7,3,5,2,4};\n    int n = 5;\n",
      "starterCode": "    // Your code here\n",
      "suffixCode": "    return 0;\n}",
      "desiredOutput": { "type": "exact", "value": "2 3 4 5 7" },
      "maxLines": 8
    },
    {
      "type": "text",
      "text": "Insertion sort builds the sorted array one element at a time by inserting each element into its correct position in the sorted part. It is efficient for small datasets or nearly sorted arrays, with average time complexity O(n^2)."
    },
    {
      "type": "code-quiz",
      "language": "c",
      "prompt": "Implement insertion sort for the array {6, 1, 3, 5, 2} and print the sorted array.",
      "prefixCode": "#include <stdio.h>\nint main() {\n    int arr[] = {6,1,3,5,2};\n    int n = 5;\n",
      "starterCode": "    // Your code here\n",
      "suffixCode": "    return 0;\n}",
      "desiredOutput": { "type": "exact", "value": "1 2 3 5 6" },
      "maxLines": 8
    },
    {
      "type": "text",
      "text": "Reflection: Understanding simple sorting algorithms helps you grasp the basics of algorithm design, comparisons, and swaps. They form the foundation for learning more advanced algorithms like quicksort and mergesort."
    },
    {
      "type": "multiple-choice-quiz",
      "question": "Which sorting algorithm repeatedly swaps adjacent elements until the array is sorted?",
      "options": [
        { "id": "a", "text": "Selection Sort" },
        { "id": "b", "text": "Insertion Sort" },
        { "id": "c", "text": "Bubble Sort", "correct": true },
        { "id": "d", "text": "Merge Sort" }
      ],
      "explanation": "Bubble sort repeatedly compares and swaps adjacent elements until the entire array is sorted."
    }
  ]
}
